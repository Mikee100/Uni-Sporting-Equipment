import React, { useEffect, useState } from 'react';
import api from '../../api/axios';
import { FaUsers } from 'react-icons/fa';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const StaffUsers = () => {
  const [users, setUsers] = useState([]);
  const [userSearch, setUserSearch] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchUsers = async () => {
      setLoading(true);
      try {
        const res = await api.get('/api/users?role=user');
        setUsers(res.data);
        setError('');
      } catch (err) {
        setError('Failed to fetch users');
      }
      setLoading(false);
    };
    fetchUsers();
  }, []);

  // CSV Export
  const exportCSV = () => {
    const headers = ['Name', 'Email', 'Role'];
    const filtered = users.filter(user =>
      user.name.toLowerCase().includes(userSearch.toLowerCase()) ||
      user.email.toLowerCase().includes(userSearch.toLowerCase())
    );
    const rows = filtered.map(u => [u.name, u.email, u.role]);
    let csvContent = 'data:text/csv;charset=utf-8,' + [headers, ...rows].map(e => e.join(",")).join("\n");
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', 'users.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Helper to load logo as base64
  const getLogoBase64 = () => {
    return new Promise((resolve, reject) => {
      const img = new window.Image();
      img.crossOrigin = 'Anonymous';
      img.src = '/riara.webp';
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/webp'));
      };
      img.onerror = reject;
    });
  };

  // PDF Export (branded)
  const exportPDF = async () => {
    const doc = new jsPDF({ orientation: 'landscape', unit: 'pt', format: 'A4' });
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const logoBase64 = await getLogoBase64();
    // Header
    doc.addImage(logoBase64, 'WEBP', 40, 18, 60, 60);
    doc.setFontSize(22);
    doc.setTextColor('#2563eb');
    doc.text('User List', pageWidth / 2, 50, { align: 'center' });
    doc.setFontSize(12);
    doc.setTextColor('#333');
    doc.text('Generated by Uni Sporting Equipment System', pageWidth / 2, 70, { align: 'center' });
    // Table
    const filtered = users.filter(user =>
      user.name.toLowerCase().includes(userSearch.toLowerCase()) ||
      user.email.toLowerCase().includes(userSearch.toLowerCase())
    );
    doc.autoTable({
      head: [['Name', 'Email', 'Role']],
      body: filtered.map(u => [u.name, u.email, u.role]),
      startY: 90,
      margin: { left: 40, right: 40 },
      styles: { fontSize: 11, cellPadding: 6 },
      headStyles: { fillColor: [37, 99, 235], textColor: 255, fontStyle: 'bold' },
      alternateRowStyles: { fillColor: [240, 245, 255] },
      didDrawPage: (data) => {
        // Footer
        const date = new Date().toLocaleString();
        doc.setFontSize(10);
        doc.setTextColor('#888');
        doc.text(`Generated: ${date}`, 40, pageHeight - 20);
        doc.text('Uni Sporting Equipment System', pageWidth / 2, pageHeight - 20, { align: 'center' });
        doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageWidth - 60, pageHeight - 20);
      },
    });
    doc.save('users.pdf');
  };

  return (
    <div className="ml-56 p-8 min-h-screen bg-gray-50">
      <h1 className="text-2xl font-bold mb-4 text-blue-700 flex items-center gap-2"><FaUsers className="text-blue-600" /> User Management</h1>
      {error && <div className="text-red-500 mb-2">{error}</div>}
      <div className="flex gap-2 mb-4 justify-end">
        <button onClick={exportCSV} className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded shadow font-semibold">Export CSV</button>
        <button onClick={exportPDF} className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded shadow font-semibold">Export PDF</button>
      </div>
      <div className="mb-2 flex justify-end">
        <input
          type="text"
          placeholder="Search users..."
          className="border px-2 py-1 rounded"
          value={userSearch}
          onChange={e => setUserSearch(e.target.value)}
        />
      </div>
      <div className="overflow-x-auto bg-white rounded-xl shadow p-4">
        <table className="min-w-full">
          <thead>
            <tr>
              <th className="py-2 px-4 border-b">Name</th>
              <th className="py-2 px-4 border-b">Email</th>
              <th className="py-2 px-4 border-b">Role</th>
            </tr>
          </thead>
          <tbody>
            {users.filter(user =>
              user.name.toLowerCase().includes(userSearch.toLowerCase()) ||
              user.email.toLowerCase().includes(userSearch.toLowerCase())
            ).map(user => (
              <tr key={user.id} className="text-center">
                <td className="py-2 px-4 border-b">{user.name}</td>
                <td className="py-2 px-4 border-b">{user.email}</td>
                <td className="py-2 px-4 border-b capitalize">{user.role}</td>
              </tr>
            ))}
            {users.filter(user =>
              user.name.toLowerCase().includes(userSearch.toLowerCase()) ||
              user.email.toLowerCase().includes(userSearch.toLowerCase())
            ).length === 0 && (
              <tr><td colSpan={3} className="py-4 text-gray-500">No users found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default StaffUsers; 