import React, { useEffect, useState } from 'react';
import api from '../../api/axios';
import { FaTools } from 'react-icons/fa';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const statusColors = {
  available: 'bg-green-100 text-green-700',
  borrowed: 'bg-blue-100 text-blue-700',
  lost: 'bg-yellow-100 text-yellow-700',
  damaged: 'bg-purple-100 text-purple-700',
};

const COMMON_SPORTS = [
  'All Sports', 'Football', 'Basketball', 'Tennis', 'Volleyball', 'Badminton', 'Table Tennis', 'Cricket', 'Rugby', 'Hockey', 'Athletics', 'Swimming', 'Other', 'General'
];

const StaffEquipment = () => {
  const [equipment, setEquipment] = useState([]);
  const [equipmentSearch, setEquipmentSearch] = useState('');
  const [sportFilter, setSportFilter] = useState('All Sports');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchEquipment = async () => {
      setLoading(true);
      try {
        const res = await api.get('/api/equipment');
        setEquipment(res.data);
        setError('');
      } catch (err) {
        setError('Failed to fetch equipment');
      }
      setLoading(false);
    };
    fetchEquipment();
  }, []);

  // CSV Export
  const exportCSV = () => {
    const headers = ['Name', 'Sport', 'Description', 'Quantity', 'Status'];
    const filtered = equipment.filter(item =>
      (sportFilter === 'All Sports' ? true : item.sport === sportFilter) &&
      (item.name.toLowerCase().includes(equipmentSearch.toLowerCase()) ||
      item.description?.toLowerCase().includes(equipmentSearch.toLowerCase()))
    );
    const rows = filtered.map(item => [item.name, item.sport || 'General', item.description, item.quantity, item.status]);
    let csvContent = 'data:text/csv;charset=utf-8,' + [headers, ...rows].map(e => e.join(",")).join("\n");
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement('a');
    link.setAttribute('href', encodedUri);
    link.setAttribute('download', 'equipment.csv');
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Helper to load logo as base64
  const getLogoBase64 = () => {
    return new Promise((resolve, reject) => {
      const img = new window.Image();
      img.crossOrigin = 'Anonymous';
      img.src = process.env.PUBLIC_URL + '/riara.webp';
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        resolve(canvas.toDataURL('image/webp'));
      };
      img.onerror = reject;
    });
  };

  // PDF Export (branded)
  const exportPDF = async () => {
    const doc = new jsPDF({ orientation: 'landscape', unit: 'pt', format: 'A4' });
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const logoBase64 = await getLogoBase64();
    // Header
    doc.addImage(logoBase64, 'WEBP', 40, 18, 60, 60);
    doc.setFontSize(22);
    doc.setTextColor('#2563eb');
    doc.text('Equipment List', pageWidth / 2, 50, { align: 'center' });
    doc.setFontSize(12);
    doc.setTextColor('#333');
    doc.text('Generated by Uni Sporting Equipment System', pageWidth / 2, 70, { align: 'center' });
    // Table
    const filtered = equipment.filter(item =>
      (sportFilter === 'All Sports' ? true : item.sport === sportFilter) &&
      (item.name.toLowerCase().includes(equipmentSearch.toLowerCase()) ||
      item.description?.toLowerCase().includes(equipmentSearch.toLowerCase()))
    );
    doc.autoTable({
      head: [['Name', 'Sport', 'Description', 'Quantity', 'Status']],
      body: filtered.map(item => [item.name, item.sport || 'General', item.description, item.quantity, item.status]),
      startY: 90,
      margin: { left: 40, right: 40 },
      styles: { fontSize: 11, cellPadding: 6 },
      headStyles: { fillColor: [37, 99, 235], textColor: 255, fontStyle: 'bold' },
      alternateRowStyles: { fillColor: [240, 245, 255] },
      didDrawPage: (data) => {
        // Footer
        const date = new Date().toLocaleString();
        doc.setFontSize(10);
        doc.setTextColor('#888');
        doc.text(`Generated: ${date}`, 40, pageHeight - 20);
        doc.text('Uni Sporting Equipment System', pageWidth / 2, pageHeight - 20, { align: 'center' });
        doc.text(`Page ${doc.internal.getNumberOfPages()}`, pageWidth - 60, pageHeight - 20);
      },
    });
    doc.save('equipment.pdf');
  };

  return (
    <div className="ml-56 p-8 min-h-screen bg-gray-50">
      <h1 className="text-2xl font-bold mb-4 text-blue-700 flex items-center gap-2"><FaTools className="text-green-600" /> Equipment Management</h1>
      {error && <div className="text-red-500 mb-2">{error}</div>}
      <div className="mb-2 flex justify-end gap-2 items-center">
        <input
          type="text"
          placeholder="Search equipment..."
          className="border px-2 py-1 rounded"
          value={equipmentSearch}
          onChange={e => setEquipmentSearch(e.target.value)}
        />
        {/* Sport Filter Dropdown */}
        <select
          value={sportFilter}
          onChange={e => setSportFilter(e.target.value)}
          className="border px-2 py-1 rounded"
        >
          {COMMON_SPORTS.map(sport => (
            <option key={sport} value={sport}>{sport}</option>
          ))}
        </select>
      </div>
      <div className="flex gap-2 mb-4 justify-end">
        <button onClick={exportCSV} className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded shadow font-semibold">Export CSV</button>
        <button onClick={exportPDF} className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded shadow font-semibold">Export PDF</button>
      </div>
      <div className="overflow-x-auto bg-white rounded-xl shadow p-4">
        <table className="min-w-full">
          <thead>
            <tr>
              <th className="py-2 px-4 border-b">Name</th>
              <th className="py-2 px-4 border-b">Sport</th>
              <th className="py-2 px-4 border-b">Description</th>
              <th className="py-2 px-4 border-b">Quantity</th>
              <th className="py-2 px-4 border-b">Status</th>
            </tr>
          </thead>
          <tbody>
            {equipment.filter(item =>
              (sportFilter === 'All Sports' ? true : item.sport === sportFilter) &&
              (item.name.toLowerCase().includes(equipmentSearch.toLowerCase()) ||
              item.description?.toLowerCase().includes(equipmentSearch.toLowerCase()))
            ).map(item => (
              <tr key={item.id} className="text-center">
                <td className="py-2 px-4 border-b">{item.name}</td>
                <td className="py-2 px-4 border-b">{item.sport || 'General'}</td>
                <td className="py-2 px-4 border-b">{item.description}</td>
                <td className="py-2 px-4 border-b">{item.quantity}</td>
                <td className="py-2 px-4 border-b capitalize">
                  <span className={`inline-block px-3 py-1 rounded-full text-xs font-semibold ${statusColors[item.status] || 'bg-gray-200 text-gray-700'}`}>{item.status.charAt(0).toUpperCase() + item.status.slice(1)}</span>
                </td>
              </tr>
            ))}
            {equipment.filter(item =>
              (sportFilter === 'All Sports' ? true : item.sport === sportFilter) &&
              (item.name.toLowerCase().includes(equipmentSearch.toLowerCase()) ||
              item.description?.toLowerCase().includes(equipmentSearch.toLowerCase()))
            ).length === 0 && (
              <tr><td colSpan={5} className="py-4 text-gray-500">No equipment found.</td></tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default StaffEquipment; 